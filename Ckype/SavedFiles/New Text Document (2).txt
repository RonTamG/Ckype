using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PacketLibrary
{
    public class FilePacket : PacketStructure
    {
        private string _filename;
        private int _startingPos;
        private ushort _length;
        private uint _totalFilelength;

        public FilePacket(string filename, ushort length, uint totalFileLength, ushort startingPos, Person dest, Person sender)
            : base((ushort)(length), (ushort)type.File) // 4 = 2length + 2type // packet type 3000 = file
        {
            _filename = filename;
            _startingPos = startingPos;
            _length = length;
            _totalFilelength = totalFileLength;
            WriteUInt(totalFileLength, 4);
            WriteUShort(startingPos, 8);
            WriteUShort(length, 10);
            WriteUShort((ushort)sender.Data.Length, 12);
            WriteByteArray(sender.Data, 14);
            WriteUShort((ushort)dest.Data.Length, 14 + sender.Data.Length);
            WriteByteArray(dest.Data, 16 + sender.Data.Length);
            WriteUShort((ushort)filename.Length, 16 + dest.Data.Length + sender.Data.Length);
            WriteString(filename, 18 + dest.Data.Length + sender.Data.Length);
        }

        public FilePacket(byte[] packet)
            : base(packet)
        {
            _startingPos = ReadUShort(8);
            _length = ReadUShort(10);
            _filename = ReadString(18 + ReadUShort(12) + ReadUShort(14 + ReadUShort(12)), ReadUShort(16 + ReadUShort(12) + ReadUShort(14 + ReadUShort(12))));
            _totalFilelength = ReadUInt(4);
        }

        public uint TotalFileLength
        {
            get { return _totalFilelength; }
        }

        public string Filename
        {
            get {return _filename; }
        }

        public byte[] FileContents
        {
            get { return ReadByteArray(_startingPos, _length - _startingPos); }
        }
        public Person senderClient
        {
            get { return new Person(ReadByteArray(14, ReadUShort(12))); }
        }

        public Person destClient
        {
            get { return new Person(ReadByteArray(16 + ReadUShort(12), 14 + ReadUShort(12))); }
        }

        public void SetFinishedType()
        {
            WriteUShort((ushort)type.FileFinished, 2);
        }
    }
}
            <!-- filename display -->
            <Border CornerRadius="7.5"
                    Padding="7.5"
                    VerticalAlignment="Top"
                    HorizontalAlignment="Right"
                    Background="{StaticResource ForegroundLightBrush}"
                    BorderBrush="{StaticResource DarkGrayBlueBrush}"
                    BorderThickness="3"
                    Panel.ZIndex="1"
                    Visibility="{Binding HasImageAttachment, Converter={conv:BoleanToVisibilityConverter}}"
                        >

                <!-- filename text -->
                <TextBlock VerticalAlignment="Center"
                               TextWrapping="Wrap"
                               FontFamily="{StaticResource LatoRegular}"
                               Text="{Binding ImageAttachment.FileName}"/>

            </Border>